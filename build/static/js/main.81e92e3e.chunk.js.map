{"version":3,"sources":["logo.svg","Task.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Task","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDelete","bind","assertThisInitialized","handleFinish","console","log","taskId","react_default","a","createElement","style","width","isFinish","display","textDecoration","textAlign","onClick","content","button_default","type","size","marginRight","React","Component","TodoList","state","displayMode","windowSize","userInput","counter","list","id","handleAdd","handleClear","handleChange","handleDisplayMode","todoTitle","document","querySelector","init","showCursor","strings","backDelay","setState","body","offsetWidth","window","addEventListener","handleResize","e","target","innerWidth","newlist","concat","event","value","filter","item","map","getAttribute","_this2","Style","listInputStyle","margin","marginTop","fontSize","todolistStyle","height","backgroundColor","buttonStyle","paddingLeft","todolist","src_Task","marginBottom","list_default","header","footer","bordered","dataSource","renderItem","Item","input_default","onChange","mode","App","className","src_TodoList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81e92e3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, {Component} from 'react';\r\nimport {Button} from \"antd\";\r\n\r\nclass Task extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleFinish = this.handleFinish.bind(this);\r\n    }\r\n\r\nhandleDelete(){\r\n    console.log(this.props.taskId)\r\n    this.props.handleDelete(this.props.taskId);\r\n}\r\n\r\nhandleFinish(){\r\n    this.props.handleFinish(this.props.taskId);\r\n}\r\n    render(){\r\n\r\n        return <div style={{width:\"100%\"}}>\r\n        <li style={this.props.isFinish==false?{display:\"inline-block\",width:\"80%\",textDecoration:\"none\",textAlign:\"left\"}:\r\n        {display:\"inline-block\",textDecoration:\"line-through\",textAlign:\"left\",width:\"80%\"}} onClick={this.handleFinish}>{this.props.content}</li>\r\n        <Button type=\"danger\" size=\"small\" onClick={this.handleDelete} style={{display:\"inline-block\",marginRight:\"0\"}}>delete</Button>\r\n        </div> \r\n    }\r\n}\r\n\r\nexport default Task;","import React, {Component} from 'react';\r\nimport Task from \"./Task\"\r\nimport {Input, Button, List} from \"antd\";\r\nimport {init} from \"ityped\";\r\n\r\n\r\nclass TodoList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            displayMode:\"normal\",\r\n            windowSize:0,\r\n            userInput:\"\",\r\n            counter:3,\r\n            list:[\r\n                {\r\n                    id:0,\r\n                    content:\"This is my Todo list app\",\r\n                    isFinish: false\r\n                },\r\n                {\r\n                    id:1,\r\n                    content:\"You can try to click the task to finish it\",\r\n                    isFinish: false\r\n                }\r\n                ,\r\n                {\r\n                    id:2,\r\n                    content:\"And try different buttons to display different kind of tasks\",\r\n                    isFinish: false\r\n                }\r\n\r\n            ]\r\n        }\r\n        \r\n        this.handleAdd = this.handleAdd.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n        this.handleFinish = this.handleFinish.bind(this);\r\n        this.handleDisplayMode = this.handleDisplayMode.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        const todoTitle = document.querySelector('#todoTitle')\r\n      init(todoTitle, { showCursor: false, strings: ['This is my Todo-list', 'Enjoy!' ],backDelay:  1500, })\r\n      this.setState({\r\n          windowSize: document.body.offsetWidth\r\n      })\r\n      window.addEventListener('resize', this.handleResize.bind(this))\r\n    }\r\n\r\n    handleResize(e){\r\n        console.log('浏览器窗口大小改变事件', e.target.innerWidth)\r\n        this.setState(\r\n            {windowSize:e.target.innerWidth}\r\n    )\r\n    }\r\n\r\n    handleAdd(){\r\n        let newlist = this.state.list.concat({\r\n            id: this.state.counter,\r\n            content:this.state.userInput,\r\n            isFinish:false\r\n            });\r\n        console.log(newlist);\r\n        this.setState({\r\n            counter:this.state.counter+1,\r\n            list: newlist,\r\n            userInput:''\r\n        }        \r\n    )\r\n    }\r\n\r\n    handleClear(){\r\n        this.setState({\r\n            list: []\r\n        })\r\n    }\r\n\r\n    \r\n    handleChange(event){\r\n        this.setState(\r\n            {\r\n                userInput:event.target.value\r\n            }\r\n        )\r\n    }\r\n\r\n   handleDelete(taskId){\r\n       console.log(taskId)\r\n       let newlist = this.state.list.filter(\r\n           (item)=>{\r\n               return item.id !== taskId;\r\n           }\r\n       )\r\n        console.log(newlist);\r\n       this.setState(\r\n           {\r\n               list: newlist\r\n           }\r\n       )\r\n   }\r\n\r\n   handleFinish(taskId){\r\n       console.log(\"success\");\r\n       let newlist = this.state.list.map((item)=>{\r\n           if(item.id === taskId){\r\n               let newitem = {\r\n                   id:item.id,\r\n                   content:item.content,\r\n                   isFinish:!item.isFinish\r\n               }\r\n                return newitem;\r\n            }else{\r\n                return item;\r\n        }\r\n       });\r\n       \r\n    this.setState({\r\n        list:newlist\r\n    })      \r\n   }\r\n\r\n   handleDisplayMode(event){\r\n       console.log(event.target.getAttribute(\"mode\"))\r\n       this.setState({\r\n        displayMode:event.target.getAttribute(\"mode\")\r\n       })\r\n       \r\n   }\r\n   \r\n    render(){\r\n        const Style = this.state.windowSize<770?\r\n        {\r\n            listInputStyle:{    \r\n                width: \"80%\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n                marginTop: 20,\r\n                fontSize:\"16px\"\r\n            },\r\n            todolistStyle:{\r\n                height:\"100%\",\r\n                width: \"80%\",\r\n                margin: \"auto\",\r\n                backgroundColor:\"white\",\r\n                fontSize:\"16px\"\r\n            },\r\n            buttonStyle:{\r\n                marginRight:\"4px\",\r\n                width:\"15%\",\r\n                fontSize:10,\r\n                //textAlign:\"left\"\r\n                paddingLeft: 0\r\n            }\r\n        }:{\r\n            listInputStyle:{    \r\n                width: \"70%\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n                marginTop: 20,\r\n                fontSize:\"18px\"\r\n            },\r\n            todolistStyle:{\r\n                height:\"100%\",\r\n                width: \"70%\",\r\n                margin: \"auto\",\r\n                backgroundColor:\"white\",\r\n                fontSize:\"18px\"\r\n            },\r\n            buttonStyle:{\r\n                marginRight:\"10px\"\r\n            }\r\n        }\r\n\r\n        const todolist = \r\n        this.state.displayMode==\"normal\"?this.state.list.map((item)=>{\r\n            return<Task taskId={item.id} content={item.content} handleDelete={this.handleDelete} \r\n       handleFinish={this.handleFinish} isFinish={item.isFinish}/>\r\n        }):\r\n        this.state.displayMode==\"finish\"?this.state.list.filter((item)=>{\r\n            return item.isFinish === true;\r\n        }).map((item)=>{\r\n            return<Task taskId={item.id} content={item.content} handleDelete={this.handleDelete} \r\n       handleFinish={this.handleFinish} isFinish={item.isFinish}/>\r\n        }):\r\n        this.state.list.filter((item)=>{\r\n            return item.isFinish === false;\r\n        }).map((item)=>{\r\n            return<Task taskId={item.id} content={item.content} handleDelete={this.handleDelete} \r\n       handleFinish={this.handleFinish} isFinish={item.isFinish}/>\r\n        })\r\n        \r\n\r\n        return (\r\n           \r\n            <div style={{backgroundColor:\"gray\",height:\"100%\"}}>\r\n                <h1>Todo-List</h1>\r\n                <div id=\"todoTitle\" style={{height:\"15px\",width:\"auto\",marginBottom:20, fontSize:20}}/>\r\n                <List\r\n                 style={Style.todolistStyle}\r\n                 header={<div>Displaying: {this.state.displayMode}</div>}\r\n                 footer={<div style={{marginBottom:\"20px\"}}>Todolist Version: v0.0.3</div>}\r\n                 bordered\r\n                 dataSource={todolist}\r\n                 renderItem={item => (\r\n                 <List.Item>{item}</List.Item>\r\n                 )}\r\n                  />\r\n                  \r\n                <Input style={Style.listInputStyle} type=\"string\" onChange={this.handleChange} value={this.state.userInput}></Input>\r\n                <div style={{marginTop: 10}}>\r\n                <Button style={Style.buttonStyle} onClick={this.handleAdd}>Add Todo</Button>\r\n                <Button style={Style.buttonStyle} onClick={this.handleClear}>clear</Button>\r\n                <Button style={Style.buttonStyle} onClick={this.handleDisplayMode} mode=\"normal\">show all</Button>\r\n                <Button style={Style.buttonStyle} onClick={this.handleDisplayMode} mode=\"unfinish\">show unfinish</Button>\r\n                <Button style={Style.buttonStyle} onClick={this.handleDisplayMode} mode=\"finish\">show finish</Button>\r\n                </div>\r\n             </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport TodoList from \"./TodoList\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <TodoList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}