{"version":3,"sources":["logo.svg","Task.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Task","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDelete","bind","assertThisInitialized","handleFinish","console","log","taskId","react_default","a","createElement","style","isFinish","textDecoration","display","onClick","content","React","Component","TodoList","state","displayMode","userInput","counter","list","handleAdd","handleClear","handleChange","handleDisplayMode","newlist","concat","id","setState","event","target","value","filter","item","map","getAttribute","_this2","todolist","src_Task","type","onChange","mode","App","className","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15a1adcb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\n\nclass Task extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleFinish = this.handleFinish.bind(this);\n    }\n\nhandleDelete(){\n    console.log(this.props.taskId)\n    this.props.handleDelete(this.props.taskId);\n}\n\nhandleFinish(){\n    this.props.handleFinish(this.props.taskId);\n}\n    render(){\n\n        return <div>\n        <li style={this.props.isFinish==false?{textDecoration:\"none\",display:\"inline-block\"}:{textDecoration:\"line-through\",display:\"inline-block\"}} onClick={this.handleFinish}>{this.props.content}</li>\n        <button onClick={this.handleDelete}>delete</button>\n        </div> \n    }\n}\n\nexport default Task;","import React, {Component} from 'react';\nimport Task from \"./Task\"\nclass TodoList extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state={\n            displayMode:\"normal\",\n            userInput:\"\",\n            counter:0,\n            list:[]\n        }\n        \n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleFinish = this.handleFinish.bind(this);\n        this.handleDisplayMode = this.handleDisplayMode.bind(this);\n    }\n    handleAdd(){\n        let newlist = this.state.list.concat({\n            id: this.state.counter,\n            content:this.state.userInput,\n            isFinish:false\n            });\n        console.log(newlist);\n        this.setState({\n            counter:this.state.counter+1,\n            list: newlist,\n            userInput:''\n        }        \n    )\n    }\n\n    handleClear(){\n        this.setState({\n            list: []\n        })\n    }\n\n    \n    handleChange(event){\n        this.setState(\n            {\n                userInput:event.target.value\n            }\n        )\n    }\n\n   handleDelete(taskId){\n       console.log(taskId)\n       let newlist = this.state.list.filter(\n           (item)=>{\n               return item.id !== taskId;\n           }\n       )\n        console.log(newlist);\n       this.setState(\n           {\n               list: newlist\n           }\n       )\n   }\n\n   handleFinish(taskId){\n       console.log(\"success\");\n       let newlist = this.state.list.map((item)=>{\n           if(item.id === taskId){\n               let newitem = {\n                   id:item.id,\n                   content:item.content,\n                   isFinish:!item.isFinish\n               }\n                return newitem;\n            }else{\n                return item;\n        }\n       });\n       \n    this.setState({\n        list:newlist\n    })      \n   }\n\n   handleDisplayMode(event){\n       console.log(event.target.getAttribute(\"mode\"))\n       this.setState({\n        displayMode:event.target.getAttribute(\"mode\")\n       })\n       \n   }\n   \n    render(){\n        \n        const todolist = \n        this.state.displayMode==\"normal\"?this.state.list.map((item)=>{\n            return<Task taskId={item.id} content={item.content} handleDelete={this.handleDelete} \n       handleFinish={this.handleFinish} isFinish={item.isFinish}/>\n        }):\n        this.state.displayMode==\"finish\"?this.state.list.filter((item)=>{\n            return item.isFinish === true;\n        }).map((item)=>{\n            return<Task taskId={item.id} content={item.content} handleDelete={this.handleDelete} \n       handleFinish={this.handleFinish} isFinish={item.isFinish}/>\n        }):\n        this.state.list.filter((item)=>{\n            return item.isFinish === false;\n        }).map((item)=>{\n            return<Task taskId={item.id} content={item.content} handleDelete={this.handleDelete} \n       handleFinish={this.handleFinish} isFinish={item.isFinish}/>\n        })\n        \n\n        return (\n            \n            <div>\n                <h1>To-Do-List</h1>\n                <h2>displaying {this.state.displayMode}</h2>\n                <ul>\n                    {\n                        todolist\n                    }\n                </ul>\n                <input type=\"string\" onChange={this.handleChange} value={this.state.userInput}></input>\n                <button onClick={this.handleAdd}>Add Todo</button>\n                <button onClick={this.handleClear}>clear</button>\n                <button onClick={this.handleDisplayMode} mode=\"normal\">show all</button>\n                <button onClick={this.handleDisplayMode} mode=\"finish\">show finish</button>\n                <button onClick={this.handleDisplayMode} mode=\"unfinish\">show unfinish</button>\n            </div>\n        )\n    }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport TodoList from \"./TodoList\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}